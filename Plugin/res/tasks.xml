<experiment>
    <task>
        <text>What components (files/packages etc.) in the project seem responsible for updating content in the ComicReader app?  List three.
		</text>
        
    </task>
    <task>
        <text>Some comics are released daily, some are released weekly, and so on. What components (files/packages etc.) represent the different types of comics in the application?  List three.
		</text>
       
    </task>
    <task>
        <text>In an Android application, the window you see on the phone screen is an Activity. Each screen is implemented as a separate “Activity”. From the file names, can you find and list three classes that seem to be implementing an Activity? 
</text>
		<recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        
    </task>
    <task>
        <text>There are two EfficientAdapter classes.  Give the file name and line number of the privately scoped one.</text>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        
    </task>
    <task>
        <text>What is the relationship between the classes ArchivedComic and Comic?  Your answer should be 140 characters or less (tweet-sized).</text>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.type.hierarchy</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.hierarchy</recommendation>
        
    </task>
    <task>
        <text>Does the class DailyComic have any siblings? If yes, name up to five.
</text>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.type.hierarchy</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.hierarchy</recommendation>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        
    </task>
    <task>
        <text>Locate and open the file Strip.java.  List the line numbers where the Strip constructor is invoked in this file. 
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.references.in.project</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.references.in.hierarchy</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace</recommendation>

    </task>
    
    <task>
        <text>Open the file PennyArcade.java. Navigate to the method parse(). Notice that parse() is an overridden method. What class it is overridden from?
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.show.outline</recommendation>
		<recommendation>org.eclipse.jdt.ui.edit.text.java.open.hierarchy</recommendation>
        <recommendation>org.eclipse.ui.navigate.showIn</recommendation>
        
    </task>

    <task>
        <text>“Go to github” is a part of a dialog box shown in the app.  Find where the dialog box is made and comment out the listener that responds to the click notification.  
		Please give the file and the line numbers that you commented out.
</text>
        <recommendation>org.eclipse.search.ui.openFileSearchPage</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.toggle.comment</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.add.block.comment</recommendation>
        
    </task>


    <task>
        <text>Open the file Cyanide.java. There's a method in a super class that should be overriden to provide the comic name.  Override that method and make it return the string “Cyanide and Happiness Comic”.  Copy and paste your added code into the box below, as well as the line numbers where it is.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.override.methods</recommendation>
        <recommendation>org.eclipse.ui.edit.text.contentAssist.proposals</recommendation>
        
    </task>

    <task>
        <text>How many classes are defined inside the class ActivityComicReader?  List them.</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.show.outline</recommendation>
        <recommendation>org.eclipse.ui.navigate.showIn</recommendation>
        
    </task>

    <task>
        <text>Open the file Comic.java. Navigate to the method downloadCurrentStrip(). Name one method from the Downloader class that gets invoked during the execution of downloadCurrentStrip().
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.editor</recommendation>
        
    </task>

    <task>
        <text>Open the file ComicClassList.java and navigate to line 585. What method is there? How many places, if any, is it called directly?
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.ui.edit.text.goto.line</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.editor</recommendation>
        
    </task>

    <task>
        <text>Open the file that defines the AsciiComparator class and navigate to line 51 in that file. There is a field declared at that line. Find out where that field's value changes (i.e. is written to).  List the file name and line number of up to 5 such locations.
	</text>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.ui.edit.text.goto.line</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.write.access.in.project</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.write.access.in.workspace</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.write.access.in.hierarchy</recommendation>
    </task>

    <task>
        <text>This is a debugging task. Debugging on Android emulator is a pain. To make debugging easier, we will use a different project named ‘ComicReaderDebugging’. This project will run the classes as Java application on the computer instead of Android emulator. Switch to this project.

		Open the file BugComic.java. Notice that this file has a main method. This allows you to run/debug this file as a Java application. The method display() is supposed to display an array of comic urls. [it doesn't currently].  WITHOUT MODIFYING ANY CODE, find the URL string for 212th item in the array.  You may run the code as much as you wish.
	</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.ToggleBreakpoint</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.RunToLine</recommendation>
        <recommendation>org.eclipse.jdt.debug.ui.commands.Display</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepInto</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepOver</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepReturn</recommendation>
        
    </task>

    <task>
        <text>This is also a debugging task. Open the file GoGetARoomie.java and notice that this file has also a main method. This allows you to run/debug this file as a Java application. Run it as a Java application. The application crashes and throws a NumberFormatException on line 37. In 140 characters or less, why was the exception thrown? Fix the code so the exception is not thrown anymore.  Copy and paste your fixed code into the box below.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.ToggleBreakpoint</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.RunToLine</recommendation>
        <recommendation>org.eclipse.jdt.debug.ui.commands.Display</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepInto</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepOver</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepReturn</recommendation>
        
    </task>

    
</experiment>