<experiment>
    <task>
        <text>What components (files/packages etc.) in the project seem responsible for updating content in the ComicReader app? Try guessing just by going through the file names.
</text>
        
    </task>
    <task>
        <text>Some comics are released daily, some are released weekly, and so on. What components (files/packages etc.) represent the different types of comics in the application? Answer just by going through the file names.
</text>
       
    </task>
    <task>
        <text>In an Android application, the window you see on the phone screen is an Activity. Each screen is implemented as a separate “Activity”. Go through the project files and name three classes that seem to be implementing an Activity in the ComicReader project. 
</text>
		<recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        
    </task>
    <task>
        <text>Open the file ArchivedComic.java</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        
    </task>
    <task>
        <text>What is the relationship between the classes ArchivedComic and Comic?</text>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.type.hierarchy</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.hierarchy</recommendation>
        
    </task>
    <task>
        <text>Does the class DailyComic have a sibling? If yes, name it.
</text>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.type.hierarchy</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.hierarchy</recommendation>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        
    </task>
    <task>
        <text>Open the file Strip.java. Find a location where an object of the class Strip is created. (Hint: The constructor is usually called to create an onject)
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.references.in.project</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.references.in.hierarchy</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace</recommendation>

    </task>
    
    <task>
        <text>Open the file PennyArcade.java. Navigate to the method parse(). Notice that parse() is an overridden method. Find out what class it is overridden from.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.show.outline</recommendation>
        <recommendation>org.eclipse.ui.navigate.showIn</recommendation>
        
    </task>

    <task>
        <text>Search for the text “Go to github”. This message is a part of a dialog box shown in the app. Comment the code that opens this dialog box. Also add a comment line explaining why the code was commented.
</text>
        <recommendation>org.eclipse.search.ui.openFileSearchPage</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.toggle.comment</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.add.block.comment</recommendation>
        <recommendation>org.eclipse.ui.edit.text.hippieCompletion</recommendation>
        
    </task>


    <task>
        <text>Open the file Cyanide.java. Add an overridden method ‘getComicName()’ to this class. This method should return the string “Cyanide and Happiness Comic”.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.override.methods</recommendation>
        <recommendation>org.eclipse.ui.edit.text.contentAssist.proposals</recommendation>
        <recommendation>org.eclipse.ui.edit.text.hippieCompletion</recommendation>
        
    </task>

    <task>
        <text>Name 3 classes defined inside the class ActivityComicReader.</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.show.outline</recommendation>
        <recommendation>org.eclipse.ui.navigate.showIn</recommendation>
        
    </task>

    <task>
        <text>Open the file Comic.java. Navigate to the method downloadCurrentStrip(). Name one method from the Downloader class that gets invoked during the execution of downloadCurrentStrip().
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.call.hierarchy</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.open.editor</recommendation>
        
    </task>

    <task>
        <text>Open the file ComicClassList.java and navigate to line # 622. You will find the method _ignoreArticle(String) with 3 if-conditions. Move the second if-condition below the third if-condition.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.ui.edit.text.goto.line</recommendation>
        <recommendation>org.eclipse.ui.editors.lineNumberToggle</recommendation>
        <recommendation>org.eclipse.ui.edit.text.moveLineDown</recommendation>
        
    </task>

    <task>
        <text>Open the file ComicClassList.java and navigate to line 51. You will find the declaration of the variable ‘mClasses’. Find out where a new object gets created and gets assigned to the variable ‘mClasses’.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.ui.edit.text.goto.line</recommendation>
        <recommendation>org.eclipse.ui.editors.lineNumberToggle</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.write.access.in.project</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.write.access.in.workspace</recommendation>
        <recommendation>org.eclipse.jdt.ui.edit.text.java.search.write.access.in.hierarchy</recommendation>
    </task>

    <task>
        <text>This is a debugging task. Debugging on Android emulator is a pain. To make debugging easier, we will use a different project named ‘ComicReaderDebugging’. This project will run the classes as Java application on the computer instead of Android emulator. Switch to this project.

Open the file BugComic.java. Notice that this file has a main method. This allows you to run/debug this file as a Java application. The method getAllComicUrls() returns a list of URL strings for all the comic strips of The Bug Comic. Find out the URL string for 212th item in the list.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.ToggleBreakpoint</recommendation>
        <recommendation>org.eclipse.jdt.debug.ui.commands.Inspect</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.RunToLine</recommendation>
        <recommendation>org.eclipse.jdt.debug.ui.commands.Display</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepInto</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepOver</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepReturn</recommendation>
        
    </task>

    <task>
        <text>This is also a debugging task. Open the file GoGetARoomie.java and notice that this file has also a main method. This allows you to run/debug this file as a Java application. Run it as a Java application. The application crashes and throws a NumberFormatException on line 39. This exception is thrown if the string to be converted to integer contains characters that are not numbers. Find out the variable that of the exception.
</text>
        <recommendation>org.eclipse.ui.navigate.openResource</recommendation>
        <recommendation>org.eclipse.jdt.ui.navigate.open.type</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.ToggleBreakpoint</recommendation>
        <recommendation>org.eclipse.jdt.debug.ui.commands.Inspect</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.RunToLine</recommendation>
        <recommendation>org.eclipse.jdt.debug.ui.commands.Display</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepInto</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepOver</recommendation>
        <recommendation>org.eclipse.debug.ui.commands.StepReturn</recommendation>
        
    </task>

    
</experiment>